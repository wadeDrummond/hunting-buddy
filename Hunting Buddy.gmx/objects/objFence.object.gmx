<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFence</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

Scale = 1.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render Fence

var _Width = sprite_get_width(sprFence) * Scale;
var _Height = sprite_get_height(sprFence) * Scale;
var _startPos = 0;
var roomWidth = room_width + (_Width * 4);
var roomHeight = room_height + (_Height * 4);

for (var i = _startPos; i &lt; roomWidth; i += _Width)    {
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(90);
    d3d_transform_add_rotation_z(0);
    d3d_transform_add_translation(i, 0, 0);
    draw_sprite_ext(sprFence, 0, 0, 0, Scale, Scale, 0, c_white, 1);
}

for (var i = _startPos; i &lt; roomHeight; i += _Width)    {
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(90);
    d3d_transform_add_rotation_z(90);
    d3d_transform_add_translation(0, i, 0);
    draw_sprite_ext(sprFence, 0, 0, 0, Scale, Scale, 0, c_white, 1);
}

for (var i = _startPos; i &lt; roomWidth; i += _Width)    {
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(90);
    d3d_transform_add_rotation_z(180);
    d3d_transform_add_translation(i, roomHeight, 0);
    draw_sprite_ext(sprFence, 0, 0, 0, Scale, Scale, 0, c_white, 1);
}

for (var i = _startPos; i &lt; roomHeight; i += _Width)    {
    d3d_transform_set_identity();
    d3d_transform_add_rotation_x(90);
    d3d_transform_add_rotation_z(270);
    d3d_transform_add_translation(roomWidth, i, 0);
    draw_sprite_ext(sprFence, 0, 0, 0, Scale, Scale, 0, c_white, 1);
}

d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
