<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>400</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

g.roomBorder = 256;
g.minX = g.roomBorder;
g.minY = g.roomBorder;
g.maxX = room_width - g.roomBorder;
g.maxY = room_height - g.roomBorder;

PlayerInitCamera();
PlayerInitEnemy();
PlayerInitRoom();
PlayerInitCombo();
PlayerInitIntroduction();
PlayerInitRunning();
PlayerInitFog();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Movement

switch (stateCurrent)   {
    case PSTATES.INTRO:
        PlayerStateIntro();
        break;
        
    case PSTATES.PLAY:
        PlayerStatePlay();
        break;
        
    case PSTATES.FINISH:
        PlayerStateFinish();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Combo

if (comboAmount &lt; 5)
    comboScore = (comboAmount);
else if (comboAmount &lt; 10)
    comboScore = (comboAmount * 2);
else if (comboAmount &lt; 20)
    comboScore = (comboAmount * 4);
else
    comboScore = (comboAmount * 6);

comboAmount = 0;
comboTimer = comboTimerMax;

if comboMode    {
    audio_stop_all();
    stateCurrent = PSTATES.FINISH;
    submitKong = g.gameHTML;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Enemy

enemyDistance = -1;

PlayerExecuteSpawnEnemy();
enemyTimer = irandom_range(fs(4), fs(6));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Orthographics

//Don't Use Orthographics with HTML Build
if g.gameHTML
    exit;

//Initialize Variables
var _Scale = 16 + gunScale;
var _Width = sprite_get_width(sprViewmodelPistol) * _Scale;
var _Height = sprite_get_height(sprViewmodelPistol) * _Scale;
var _baseX = room_width / 2 + lengthdir_x(32, cameraAddTween / 6);
var _baseY = room_height - (_Height * 0.4) + lengthdir_y(16, cameraAddTween / 8) - (gunScale * 48) + handRunY;
var _Angle = 0;
handRunY = lerp(0, 72, runLerp);
gunScale = lerp(gunScale, 0, 0.2);

//Set Projection
d3d_fog_enable(false);
draw_set_colour(c_white);
d3d_set_projection_ortho(0, 0, room_width, room_height, 0);

//Draw Gun
draw_sprite_ext(sprViewmodelPistol, 0, _baseX, _baseY + gunYAdd, _Scale, _Scale, _Angle, c_white, 1);

//Draw Based on State
switch (stateCurrent)   {
    case PSTATES.INTRO:
        PlayerDrawEndIntro();
        break;
     
    case PSTATES.PLAY:
        PlayerDrawEndPlay();
        break;
     
    case PSTATES.FINISH:
        PlayerDrawEndFinish();
        break;  
}

//Reset
d3d_fog_enable(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Only Use if HTML!

if !g.gameHTML
    exit;

//Initialize Variables
var _Scale = 16 + gunScale;
var _Width = sprite_get_width(sprViewmodelPistol) * _Scale;
var _Height = sprite_get_height(sprViewmodelPistol) * _Scale;
var _baseX = room_width / 2 + lengthdir_x(32, cameraAddTween / 6);
var _baseY = room_height - (_Height * 0.4) + lengthdir_y(16, cameraAddTween / 8) - (gunScale * 48) + handRunY;
var _Angle = 0;
handRunY = lerp(0, 72, runLerp);
gunScale = lerp(gunScale, 0, 0.2);
    
//Set Projection
d3d_fog_enable(false);
draw_set_colour(c_white);

//Draw Gun
draw_sprite_ext(sprViewmodelPistol, 0, _baseX, _baseY + gunYAdd, _Scale, _Scale, _Angle, c_white, 1);

//Draw Based on State
switch (stateCurrent)   {
    case PSTATES.INTRO:
        PlayerDrawEndIntro();
        break;
     
    case PSTATES.PLAY:
        PlayerDrawEndPlay();
        break;
     
    case PSTATES.FINISH:
        PlayerDrawEndFinish();
        break;  
}

//Reset
d3d_fog_enable(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render

var cameraZBreathe = wave(-1, 1, 8, 0);
var cameraZWalk = lengthdir_y(4, cameraAddTween);

cameraYaw = turn(cameraYaw, enemyDirection, cameraSpeedTurn);
cameraXTo = cameraX + lengthdir_x(32, cameraYaw);
cameraYTo = cameraY + lengthdir_y(32, cameraYaw);
cameraZTo = cameraZ + cameraHeight + lengthdir_z(32, cameraPitch) + cameraZBreathe + cameraZWalk + runTilt;
cameraZFrom = cameraZ + cameraHeight + cameraZWalk;

d3d_set_projection_ext(cameraX, cameraY, cameraZFrom, cameraXTo, cameraYTo, cameraZTo, 0, 0, 1, 70, view_wview / view_hview, 1, 64000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
