<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBuddyNervous</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

image_speed = 0.225;

speechSection = 0;

if (g.sceneIndex == 9999)   {
    room_goto(roomGame);
    exit;
}

//First Cutscene
speechArray[0, 0] = "Oh. Huhhuh. Hello. Hi. I'm, uhh, I'm Buddy.";
speechArray[0, 1] = "I really like, uh, hunting.";
speechArray[0, 2] = "I've been hunting since my dad taught me when I was a boy. Uh huhhuh.";
speechArray[0, 3] = "...";
speechArray[0, 4] = "Huh? You've n-never been hunting?";
speechArray[0, 5] = "That's ok! I can teach you!";
speechArray[0, 6] = "Here, take this.";
speechArray[0, 7] = "We can go hunt in my uh, backyard. It's pretty easy to see the uh, rabbits, back there, sometimes.";
talkSpriteArray[0, 0] = sprBuddyNervousTalk;
talkSpriteArray[0, 1] = sprBuddyNervousTalk;
talkSpriteArray[0, 2] = sprBuddyNervousTalk;
talkSpriteArray[0, 3] = sprBuddyNervousTalk;
talkSpriteArray[0, 4] = sprBuddyNervousTalk;
talkSpriteArray[0, 5] = sprBuddyNervousTalk;
talkSpriteArray[0, 6] = sprBuddyOfferTalk;
talkSpriteArray[0, 7] = sprBuddyNervousTalk;
idleSpriteArray[0, 0] = sprBuddyNervous;
idleSpriteArray[0, 1] = sprBuddyNervous;
idleSpriteArray[0, 2] = sprBuddyNervous;
idleSpriteArray[0, 3] = sprBuddyNervous;
idleSpriteArray[0, 4] = sprBuddyNervous;
idleSpriteArray[0, 5] = sprBuddyNervous;
idleSpriteArray[0, 6] = sprBuddyOffer;
idleSpriteArray[0, 7] = sprBuddyNervous;

//Second Cutscene
speechArray[1, 0] = "Haha! Nice going, man.";
speechArray[1, 1] = "You did really well for your first time hunting.";
speechArray[1, 2] = "You kind of remind me, um, of my dad.";
speechArray[1, 3] = "...";
speechArray[1, 4] = "Um...";
speechArray[1, 5] = "Speaking of my dad...";
speechArray[1, 6] = "He took me hunting, um, in the park sometimes.";
speechArray[1, 7] = "There are, uh, deer, there, sometimes.";
speechArray[1, 8] = "...";
speechArray[1, 9] = "Uh, no, no, it's fine, I was hunting there, um, last week. When the police spoke to me.";
speechArray[1, 10] = "I told them I was hunting. They said, um, it was fine.";
speechArray[1, 11] = "They said it was okay if I was just hunting.";
speechArray[1, 12] = "We can go now, if you want!";
talkSpriteArray[1, 0] = sprBuddyNervousTalk;
talkSpriteArray[1, 1] = sprBuddyNervousTalk;
talkSpriteArray[1, 2] = sprBuddyNervousTalk;
talkSpriteArray[1, 3] = sprBuddyNervousTalk;
talkSpriteArray[1, 4] = sprBuddyNervousTalk;
talkSpriteArray[1, 5] = sprBuddyNervousTalk;
talkSpriteArray[1, 6] = sprBuddyOfferTalk;
talkSpriteArray[1, 7] = sprBuddyNervousTalk;
idleSpriteArray[1, 0] = sprBuddyNervous;
idleSpriteArray[1, 1] = sprBuddyNervous;
idleSpriteArray[1, 2] = sprBuddyNervous;
idleSpriteArray[1, 3] = sprBuddyNervous;
idleSpriteArray[1, 4] = sprBuddyNervous;
idleSpriteArray[1, 5] = sprBuddyNervous;
idleSpriteArray[1, 6] = sprBuddyOffer;
idleSpriteArray[1, 7] = sprBuddyNervous;

speechSectionMax = array_length_2d(speechArray, global.sceneIndex) - 1;
speechString = speechArray[global.sceneIndex, speechSection];

speechCharIndex = 0;
speechSpeed = 0.38;
speechSoundCounter = 0;
speechSoundThreshold = 1;
speechAnimSpeed = image_speed;

Ready = false;
Started = false;
xAdd = sprite_width * 2;

musicIndex[0] = bgmHuntingBuddy;
backgroundIndex[0] = sprNeighborhoodDay;

backgroundFrame = 0;
backgroundSpeed = 0;

audio_play_sound(musicIndex[g.sceneIndex], 1, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start

Ready = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Variables

if Ready    {
    var _Interact = keyboard_check_pressed(vk_enter) or mouse_check_button_pressed(mb_left);
    
    var _stringLength = string_length(speechString);
    if speechCharIndex &lt;= _stringLength    {
        var _stringCharCurrent = string_char_at(speechString, speechCharIndex);
        var _stringSpeed = TextboxReturnFactor(_stringCharCurrent);
        speechCharIndex += (speechSpeed * _stringSpeed);
        
        if _stringSpeed == 1    {
            speechSoundCounter += speechSpeed;
            if speechSoundCounter &gt; speechSoundThreshold    {
                speechSoundCounter = 0;
                sound(sndDialogue, 0.8);
            }
        }
    
        
        image_speed = speechAnimSpeed;
        sprite_index = talkSpriteArray[global.sceneIndex, speechSection];
    }   else    {
        image_speed = speechAnimSpeed;
        sprite_index = idleSpriteArray[global.sceneIndex, speechSection];
    }
    
    if _Interact    {
        if speechCharIndex &lt;= _stringLength {
            speechCharIndex = _stringLength;
        }   else    {
            if speechSection &gt;= speechSectionMax    {
                event_user(0);
            }   else    {
                speechSection ++;
                speechCharIndex = 0;
                speechString = speechArray[global.sceneIndex, speechSection];
            }
        }
    }
    
    speechDraw = string_copy(speechString, 1, speechCharIndex);
}

if !instance_exists(objTransitionIn)    {
    if !Started {
        Started = true;
        alarm[0] = room_speed * 2;
    }
}

if Started  {
    xAdd = lerp(xAdd, 0, 0.01);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Perform Next Action

switch (global.sceneIndex)  {
    case 0:
        var _ID = instance_create(0, 0, objTransitionOut);
        _ID.Target = roomGame;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run Variables

image_angle = wave(-2, 2, 12, 0);
var _tweenX = wave(-4, 4, 16, 0);
var _tweenY = wave(-12, 12, 14, 8);

draw_sprite_ext(backgroundIndex[g.sceneIndex], backgroundFrame, 0, 0, 2, 2, 0, c_white, 1);
draw_sprite_ext(sprite_index, image_index, x + xAdd + _tweenX, y + _tweenY, image_xscale, image_yscale, image_angle, image_blend, image_alpha);

backgroundFrame += backgroundSpeed;

if !Ready exit;
var _x1 = 0;
var _y1 = room_height * 0.80;
var _x2 = room_width;
var _y2 = room_height;
var _drawBorder = 24;
var _drawOffset = 0.65;
var _posX = _x1 + _drawBorder;
var _posY = _y1 + _drawBorder;
var _posXBase = _posX;
var _posYBase = _posY;
var _drawColourDark = c_gray;
var _drawColourLight = c_white;

draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_set_colour(c_black);
draw_set_alpha(0.6);
draw_rectangle(_x1, _y1, _x2, _y2, false);
draw_set_alpha(1);
draw_rectangle(_x1, _y1, _x2, _y2, true);

draw_set_font(fontDialogue);
draw_set_colour(_drawColourDark);
draw_text_ext(_posX - _drawOffset, _posY - _drawOffset, speechDraw, -1, room_width - (_drawBorder * 2));
draw_set_colour(_drawColourLight);
draw_text_ext(_posX + _drawOffset, _posY + _drawOffset, speechDraw, -1, room_width - (_drawBorder * 2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
