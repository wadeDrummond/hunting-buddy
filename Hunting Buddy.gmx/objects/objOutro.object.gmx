<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

d3d_end();
d3d_set_fog(false, c_white, 0, 0);
d3d_transform_set_identity();

instance_create(0, 0, objTransitionIn);
audio_stop_all();
songCurrent = audio_play_sound(bgmTelly, 1, true);

stateIndex = 0;
stateTimer = 0;

var _Width = room_width / sprite_get_width(sprSceneTV);
var _Height = room_height / sprite_get_height(sprSceneTV);
drawScaleBase = max(_Width, _Height);
drawScale = drawScaleBase;
drawScaleTargetMax = 6;
drawX = room_width / 2;
drawY = room_height / 2;

channelString = "3";
channelAlpha = 0;

remoteScale = 1.75;
remoteYDown = room_height + 96;
remoteYUp = room_height - sprite_get_height(sprSceneTVRemote) * (drawScaleBase * remoteScale) + 96;
remoteY = remoteYDown;
remoteX = room_width - ((sprite_get_width(sprSceneTVRemote) * drawScaleBase))
remoteIndex = 0;
remoteIndexMax = sprite_get_number(sprSceneTVRemote) - 1;
remoteAngle = 0;
remoteAngleMin = -20;
remoteAngleMax = 0;

tvSprite = sprSceneTV;
tvIndex = 0;

transitionPlayed = false;

outroIndex = 0;
outroEntry[0] = "LETTERS TYPED - " + string(g.statsLetters);
outroEntry[1] = "WORDS TYPED - " + string(g.statsWords);
outroEntry[2] = "MISTAKES MADE - " + string(g.statsMistakes);
outroEntry[3] = "LONGEST COMBO - x" + string(g.statsComboLongest);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State stuff

switch (stateIndex) {
    case 0:
        if !instance_exists(objTransitionIn)
            stateTimer ++;
        if (stateTimer &gt;= fs(2))  {
            stateIndex = 1;
            stateTimer = 0;
        }
    break;
    
    case 1:
        drawScale = lerp(drawScale, drawScaleTargetMax, 0.01);
        
        stateTimer ++;
        if (stateTimer &gt;= fs(2))    {
            instance_create(0, 0, objFlicker);
            stateIndex = 2;
            stateTimer = 0;
        }
    break;
    
    case 2:
        channelAlpha = lerp(channelAlpha, 1, 0.2);
        stateTimer ++;
        
        if (stateTimer &gt;= fs(2))    {
            stateIndex = 3;
            stateTimer = 0;
        }
    break;
    
    case 3:
        channelAlpha = lerp(channelAlpha, 0, 0.05);
        if (channelAlpha &lt;= 0.05)    {
            channelAlpha = 0;
            stateIndex = 4;
            stateTimer = 0;
        }
    break;
    
    case 4:
        stateTimer ++;
        if (stateTimer &gt;= fs(0.4)) {
            if outroIndex &lt;= (array_length_1d(outroEntry) - 1)  {
                var _ID = instance_create(0, 0, objOutroEntry);
                _ID.drawString = outroEntry[outroIndex];
                _ID.waveTime = 4;
                _ID.waveOffset = (4 * (outroIndex / (array_length_1d(outroEntry))));
                outroIndex ++;
                stateTimer = 0;
            }   else    {
                if (stateTimer &gt;= fs(6))    {
                    stateIndex = 5;
                    stateTimer = 0;
                }
            }
        }
    break;
    
    case 5:
        with (objOutroEntry)    {
            alphaTarget = 0;
        }

        stateTimer ++;
        if stateTimer &gt;= fs(2)  {
            stateIndex = 6;
            stateTimer = 0;
        }
    break;
    
    case 6:
        objFlicker.On = false;
        drawScale = lerp(drawScale, drawScaleBase, 0.2);
        stateTimer ++;
        if stateTimer &gt;= fs(1)  {
            stateIndex = 7;
            stateTimer = 0;
        }
    break;
    
    case 7:
        remoteY = lerp(remoteY, remoteYUp, 0.08);
        remoteAngle = lerp(remoteAngle, remoteAngleMin, 0.08);
        stateTimer ++;
        if stateTimer &gt;= fs(2)    {
            stateIndex = 8;
            stateTimer = 0;
        }
    break;
    
    case 8:
        remoteIndex = lerp(remoteIndex, remoteIndexMax+1, 0.1);
        stateTimer ++;
        
        if remoteIndex &gt; 1 and !transitionPlayed    {
            transitionPlayed = true;
            sound(sndRemote, 1);
        }

        if stateTimer &gt;= fs(0.8)  {
            stateIndex = 9;
            stateTimer = 0;
            transitionPlayed = false;
        }
    break;
  
    case 9:
        tvIndex = irandom(3);
        tvSprite = sprSceneTVStatic;
        stateTimer ++;
        if !transitionPlayed    {
            transitionIndex = sound(sndStatic, 0.75);
            transitionPlayed = true;
        }
  
        if stateTimer &gt;= fs(1.25)    {
            stateTimer = 0;
            stateIndex = 10;
            transitionPlayed = false;
        }
    break;
    
    case 10:
        audio_stop_sound(transitionIndex);
        tvSprite = sprSceneTV;
        tvIndex = 0;
        stateTimer ++;
        if stateTimer &gt;= fs(1.5)    {
            stateTimer = 0;
            stateIndex = 11;
        }
    break;
    
    case 11:
        remoteY = lerp(remoteY, remoteYDown, 0.08);
        remoteAngle = lerp(remoteAngle, remoteAngleMax, 0.08);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw TV Stuff

var _Border = 48;
channelColour = merge_colour(c_red, c_maroon, random(0.2));
draw_set_font(fontTV);
draw_text_parameters(fa_left, fa_top, _Border, _Border, channelString, channelAlpha, channelColour, 6, 4, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw TV

var _drawRemoteX = remoteX + wave(-12, 6, 12, 0);
var _drawRemoteY = remoteY + wave(0, 4, 14, 0);
var _drawRemoteAngle = remoteAngle + wave(-4, 4, 20, 0);

draw_sprite_ext(tvSprite, tvIndex, drawX, drawY, drawScale, drawScale, 0, c_white, 1);

d3d_transform_set_identity();
d3d_transform_add_rotation_x(wave(0, 20, 4, 0));
d3d_transform_add_translation(_drawRemoteX, _drawRemoteY, 0);
draw_sprite_ext(sprSceneTVRemote, remoteIndex, 0, 0, drawScale * remoteScale, drawScale * remoteScale, _drawRemoteAngle, c_white, 1);
d3d_transform_set_identity();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
